cyclomatic_complexity:
    ignores_case_statements: true

excluded:
    - Pods
    - Externals

# You should probably use a struct if you have too many members in a tuple.
large_tuple:
    warning: 4
    error: 6

# GitHub's UI shows 120 characters
line_length: 119

empty_count: warning
shorthand_operator: warning

# Whitelist -- these are the only rules we will run.
# To read more in-depth documentation about what each rule covers, visit the documentation:
# https://github.com/realm/SwiftLint/blob/master/Rules.md
whitelist_rules:
    # Pefer `Array(seq)` over `seq.map { $0 }` when converting to an Array.
    - array_init
    # Attributes should be on their own lines in functions and types, but on the same line as variables and imports.
    # - attributes
    # Delegate protocols should be class-only so they can be weakly referenced.
    - class_delegate_protocol
    # Closure end should have the same indentation as the line that started it.
    - closure_end_indentation
    # Closure parameters should be on the same line as opening brace.
    - closure_parameter_position
    # Closure expressions should have a single space inside each brace.
    - closure_spacing
    # Colons should be next to the identifier when specifying a type and next to the key in dictionary literals.
    - colon
    # There should be no space before and one after any comma.
    - comma
    # The initializers declared in compiler protocols such as ExpressibleByArrayLiteral shouldn't be called directly.
    - compiler_protocol_init
    # Conditional statements should always return on the next line
#    - conditional_returns_on_newline
    # Prefer `contains` over `first(where:) != nil`
    - contains_over_first_not_nil
    # if,for,while,do statements shouldn't wrap their conditionals in parentheses.
    - control_statement
#    # Complexity of function bodies should be limited.
#    - cyclomatic_complexity
#    # When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later.
#    - discarded_notification_center_observer
    # Discouraged direct initialization of types that can be harmful.
    - discouraged_direct_init
    # Avoid using 'dynamic' and '@inline(__always)' together.
    - dynamic_inline
    # Prefer checking isEmpty over comparing count to zero.
    - empty_count
    # Arguments can be omitted when matching enums with associated types if they are not used.
    - empty_enum_arguments
    # Prefer `() ->` over `Void ->`.
    - empty_parameters
    # When using trailing closures, empty parentheses should be avoided after the method call.
    - empty_parentheses_with_trailing_closure
    # Explicitly calling .init() should be avoided.
    - explicit_init
#    # Fallthrough should be avoided.
#    - fallthrough
    # A fatalError call should have a message.
    - fatal_error_message
    # Prefer using .first(where:) over .filter { }.first in collections.
    - first_where
    # `where` clauses are preferred over a single `if` inside a `for`.
    - for_where
#    # Force casts should be avoided.
#    - force_cast
#    # Force tries should be avoided.
#    - force_try
#    # Force unwrapping should be avoided.
#    - force_unwrapping
    # Computed read-only properties should avoid using the get keyword.
    - implicit_getter
    # Prefer implicit returns in closures.
    - implicit_return
#    # Implicitly unwrapped optionals should be avoided when possible.
#    - implicitly_unwrapped_optional
    # Prefer using `Set.isDisjoint(with:)` over `Set.intersection(_:).isEmpty`.
    - is_disjoint
    # Discouraged explicit usage of the default separator.
    - joined_default_parameter
    # Tuples shouldn't have too many members. Create a custom type instead.
    - large_tuple
    # Files should not contain leading whitespace.
    - leading_whitespace
    # Struct extension properties and methods are preferred over legacy functions
    - legacy_cggeometry_functions
    # Struct-scoped constants are preferred over legacy global constants.
    - legacy_constant
    # Swift constructors are preferred over legacy convenience functions.
    - legacy_constructor
#    # Lines should not span too many characters.
#    - line_length
#    # Array and dictionary literal end should have the same indentation as the line that started it.
#    - literal_expression_end_indentation
    # MARK comment should be in valid format. e.g. '// MARK: ...' or '// MARK: - ...'
    - mark
#    # Arguments should be either on the same line, or one per line.
#    - multiline_arguments
    # Functions and methods parameters should be either on the same line, or one per line.
    - multiline_parameters
    # Trailing closure syntax should not be used when passing more than one closure argument.
    - multiple_closures_with_trailing_closure
#    # Types should be nested at most 1 level deep, and statements should be nested at most 5 levels deep.
#    - nesting
    # Opening braces should be preceded by a single space and on the same line as the declaration.
    - opening_brace
    # Operators should be surrounded by a single whitespace when they are being used.
    - operator_usage_whitespace
    # Operators should be surrounded by a single whitespace when defining them.
    - operator_whitespace
    # Some overridden methods should always call super
    - overridden_super_call
#    # Extensions shouldn't override declarations.
#    # Currently disabled, because it might cause problems. Need to check.
#    # - override_in_extension
    # Unit tests marked private are silently skipped.
    - private_unit_test
    # Some methods should not call super
    - prohibited_super_call
    # When declaring properties in protocols, the order of accessors should be get set.
    - protocol_property_accessors_order
    # Prefer `_ = foo()` over `let _ = foo()` when discarding a result from a function.
    - redundant_discardable_let
    # nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant
    - redundant_nil_coalescing
    # Initializing an optional variable with nil is redundant.
    - redundant_optional_initialization
    # String enum values can be omitted when they are equal to the enumcase name.
    - redundant_string_enum_value
    # Returning Void in a function declaration is redundant.
    - redundant_void_return
    # Return arrow and return type should be separated by a single space or on a separate line.
    - return_arrow_whitespace
    # Prefer shorthand operators (+=, -=, *=, /=) over doing the operation and assigning.
    - shorthand_operator
    # Prefer using `min()` or `max()` over `sorted().first` or `sorted().last` It's O(n log n) vs O(n).
    - sorted_first_last
    # Else and catch should be on the same line, one space after the previous declaration.
    - statement_position
    # Case statements should vertically align with the enclosing switch statement.
    - switch_case_alignment
    # Shorthand syntactic sugar should be used, i.e. [Int] instead of Array.
    - syntactic_sugar
    # Trailing commas in arrays and dictionaries should be avoided/enforced.
    - trailing_comma
    # Files should have a single trailing newline.
    - trailing_newline
    # Lines should not have trailing semicolons.
    - trailing_semicolon
    # Lines should not have trailing whitespace.
    - trailing_whitespace
#    # Type name should only contain alphanumeric characters, start with an uppercase character and span between 3 and 40 characters in length.
#    - type_name
    # Avoid using unneeded break statements.
    - unneeded_break_in_switch
    # Parentheses are not needed when declaring closure arguments.
    - unneeded_parentheses_in_closure_argument
    # Unused parameter in a closure should be replaced with _.
    - unused_closure_parameter
    # When the index or the item is not used, .enumerated() can be removed.
    - unused_enumerated
    # Prefer `!= nil` over `let _ =`
    - unused_optional_binding
#    # Function parameters should be aligned vertically if they're in multiple lines in a declaration.
#    - vertical_parameter_alignment
    # Function parameters should be aligned vertically if they're in multiple lines in a method call.
#    - vertical_parameter_alignment_on_call
    # Limit vertical whitespace to a single empty line.
    - vertical_whitespace
    # Prefer `-> Void` over `-> ()`.
    - void_return
    # Delegates should be weak to avoid reference cycles.
    - weak_delegate
    # An XCTFail call should include a description of the assertion.
    - xctfail_message
